#!groovy

def dockerfile= 'dockerfile'

def getUserUid() {
    return sh(returnStdout: true, script: 'id -u').trim()
}

def build(name, file = 'cxs/ci/ubuntu.dockerfile cxs/ci', customParams = '') {
    return docker.build("$name-test", "--build-arg uid=${getUserUid()} -f $file")
}

node('ubuntu') {
    try {
        stage ('Checkout'){
            checkout scm
        }
        app = buildDocker()
//        buildRust(app)
//        testRust(app) 
//        testNodeWrapper(app)
//        createZip(app)
        buildDeb(app)
    } catch (Exception ex) {
        currentBuild.result = "FAILED"
        if (env.BRANCH_NAME == "master") {
            fail()
        }
        echo "$ex error"
    } finally {
        step([$class: 'WsCleanup'])
    }
}

def buildDocker(){
    def app
    def pathToCi = 'cxs/ci'
    stage ('Build docker environment'){
        sh "pwd"
        sh "ls ${pathToCi}"
        sh "echo building"
        app = build('cxs')
    }
    return app
}

def buildRust(envn){
    stage ('Building Rust Library'){
        envn.inside {
            sh "rustc --version"
            sh "gcc --version"
            sh "mkdir -p cxs/wrappers/node/lib"
            sh "cd cxs/libcxs; cargo build"
            sh "cp cxs/libcxs/target/debug/libcxs.so cxs/wrappers/node/lib"
            sh "ls cxs/wrappers/node/lib"
        }
    }
}

def testRust(envn) {
    stage ('Testing Rust'){
        sh "echo Testing"
        envn.inside {
            sh "cd cxs/libcxs; cargo test -- --test-threads=1"
        }
    }
}


def createZip(envn) {
    dir ('cxs/libcxs/target/debug'){
        stage ('Create TAR.GZ File') {
            envn.inside {
                sh 'tar -zvcf libcxs.tar.gz libcxs.so'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'libcxs.tar.gz'
            }
        }
    }
}

def createDeb(envn) {
    stage('Build Libcxs Debian') {
        envn.inside {
            sh 'pwd'
            sh 'ls'
            sh 'cd cxs/libcxs; pwd; ls; cargo package; cargo deb'
            archiveArtifacts allowEmptyARchive: true, artifacts: 'cxs/libcxs/target/debian/libcxs_0.0.1_amd64.deb'
        }
    }
}

def testNodeWrapper(envn) {
    dir ('cxs/wrappers/node'){
        stage ('Test Node Wrapper'){
            envn.inside {
                sh 'npm -v'
                sh 'npm install'
                sh 'npm rebuild'
                sh 'npm run lint'
                sh 'npm run compile'
                sh 'npm test'
            }
        }
        stage ('Build Node Artifact'){
            envn.inside {
                //if (env.BRANCH_NAME == "master") {
                    sh 'npm pack'
                    sh 'test -f cxs-1.0.0.tgz'
                    archiveArtifacts allowEmptyArchive: true, artifacts: '**/*.tgz'
                //}
            }
        }
    }
}

def fail() {

    def message = [
        message: "$JOB_NAME - Build # $BUILD_NUMBER - fail: Check console output at $BUILD_URL to view the results."
    ]

    slackSend message

}

