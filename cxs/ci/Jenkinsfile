#!groovy

def app
def pathToCi = 'cxs/ci'
def dockerfile= 'dockerfile'

def getUserUid() {
    return sh(returnStdout: true, script: 'id -u').trim()
}

def build(name, file = 'cxs/ci/ubuntu.dockerfile cxs/ci', customParams = '') {
    return docker.build("$name-test", "--build-arg uid=${getUserUid()} -f $file")
}

node('ubuntu') {
    try {
        stage ('Checkout'){
            checkout scm
        }
        stage ('Build docker environment'){
            sh "pwd"
            sh "ls ${pathToCi}"
            sh "echo building"
            app = build('cxs')
        
        }
        stage ('Building'){
            app.inside {
                sh "rustc --version"
                sh "gcc --version"
                sh "mkdir -p cxs/wrappers/node/lib"
                sh "cd cxs/libcxs; cargo build"
                sh "cp cxs/libcxs/target/debug/libcxs.so cxs/wrappers/node/lib"
                sh "ls cxs/wrappers/node/lib"
            }
        }
        stage ('Testing'){
            sh "echo Testing"
            app.inside {
                sh "cd cxs/libcxs; cargo test -- --test-threads=1"
            }
        }
        
        testNodeWrapper(app)
    } catch (Exception ex) {
        currentBuild.result = "FAILED"
        echo "$ex error"
    } finally {
       
        step([$class: 'WsCleanup'])
        
    }
}

def testNodeWrapper(envn) {
    dir ('cxs/wrappers/node'){
        stage ('Test Node Wrapper'){
            envn.inside {
                sh 'npm -v'
                sh 'npm install'
                sh 'npm rebuild'
                sh 'npm run compile'
                sh 'npm test'
            }
        }
        stage ('Build Node Package'){
            envn.inside {
                if (env.BRANCH_NAME == "master") {
                    sh 'npm pack'
                    sh 'test -f cxs-1.0.0.tgz'
                    archiveArtifacts allowEmptyArchive: true, artifacts: '**/*.tgz'
                }
            }
        }
    }
}


