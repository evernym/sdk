#[cfg(test)]
mod tests {

    extern crate rusqlcipher;
    extern crate cxs;

    use self::cxs::utils::constants::{DEMO_ISSUER_PW_SEED, DEMO_AGENT_PW_SEED};
    use self::cxs::utils::signus::SignusUtils;
    use self::cxs::schema::{create_new_schema, get_sequence_num};
    use self::cxs::claim_def::create_new_claimdef;
    use self::cxs::utils::wallet;
    use self::cxs::utils::libindy::pool;

    static ENTRIES: &[[&str;3];6] = &[
        [
            "claim_definition::2hoqvcwupRTUNkXn6ArYzs:22",
            r#"{"ref":22,"origin":"2hoqvcwupRTUNkXn6ArYzs","signature_type":"CL","data":{"primary":{"n":"95988816833977718321053908250488629570457514208068630867750478683940516331190512635343875556353861996520420942942764044177763002317208256863583692280833664390924596927347917276916509712265099683701719722190847264336011366791349646628075830228221107542544322913672429252134634395372199666668133488708754715906386228819303847415355653588070547345790507756751815270365039011442555013267500268911273838928496074646366967013006410177564457589181935498611626078606100640175127268290631713582389212871195358403592668156815115204909093182426970335081558255981914344710344119317989929074630230145638022976317221173764697186421","s":"62239136673167627400423120471558362740458209171638071978601918053566350183687450717956992748067512356899370528120135193319392151694058748777060748081293323091215103099387813131878931292003270092633409753870130426381678924026245559969559059962714007210659185095561238242139898811485236935881011836748903561459433779778161892475164468554655878585359186684311981090938613189604474762067065341487499103199801119116900325020066015355408081181975583856258510412824439820070724438199956292870224543214915058121622865521176513439841954457206050314635711702515741604006521885357490977012671983238692772732050068670317432119054","rms":"2666742394705868422197949070279883409319120284432003775492060510232976427038817653106315822802224834945991535639305682492345293889828389066920020784361847559346088721405588350403736328639678112687453643191645972753864555837116824170886546947152931560986163238196094020179916172762650563939600887215771633895234076357514206807140568263467898745036078268629871170965547759267217089200408183373560209245380839040472521799103156292656587016193867160956678985890522193369534824821432616210787583250746210963436574615123008203792318992499168295961682255891427304653899735468070666858394635493017671211372298428346694370136","r":{"address1":"79430106995260793105642076079163752606161347435237878678168203044689856051822547487766521563311680380753591909939480622687752539511101280052606606866629584321137355571906597893399076375179861217245568711517649222005785823632572289003993523491122898953296585841084813122075085098097356338488813716328441796484205489885849185984642169508079526567645828355730756526411908147442665312484850690225714502480915918839393044940407785782203869407374317891972832948898772951301643372985568565914280784081766369554450649995485801960050418761044734560643168899544753494595613916165018601714048428268251753045528994243087065144835","zip":"22615254879355764653958650478419607599831036235429432450152331935938535743623465642971741725376817628794671474016269970108464110269202618366187203073583413269450891057851388983903286090158743373372502765956052072615948851315985651162647206520535661255385577276988024064090606137548366392128706180770747410774135297692937003056030893838687872629072920391121220887197033968789644634843044406106556939756745198489147258162398860766157964749645169766410260222255289941570381220758288764725948145819227209530054486639704113062697253001037291479989539921868196758105947084202844813888484008565116517745895178211292455694733","state":"5389307291795023724767396590585051755492881239862831966011285708839846644667534729677314805974713243759733463689119279401855775452689115868477769023824603769488834865779417919635825920919975519104516947401633401985460129750314494342807379684704178680513110561610788646263003522590695544208887512032194707187894836570620414582795466298418842377750383651243769758829214009962185051608355599514279256896379204901072282321061082831337616871861533868887226814211876439835255986208696211885637396407217496465291231085562106868927260469043543489659790071945183660814540207128940863200709695858489503545193374804871313764617","city":"74293894871977367759060252704534345335218780070750078875399161307877509632220987359349558825164299759132753770718269112182715877390141990101932340866343914532776732207720227212332987373975484039824934448470702683132162518162474377092967237940469633226277271723192881037579252515172943950534199753098776099352368667398023761611922422044473986083577562168309539427651434633868951151558156078066862888877452828814049212303812161652181936924323630202737030127237808172796156569876764079540381483951067805130896942315889373571107898166154732259892131126166507045712723368578395992958246741207450949682368692070109832600250","address2":"62245102215581448501024795144133233272032362386257832116292842768642447199425235407152317927152360802393938767974847625947081778641332887450797640622194038530111791916923268259520523425958949520886626976593312640864134231960227939479094814565673466738383505704629110772101845490196382811902708763639214281775907141634474001554782825796701982840574757506850919691605980110873914124778342476385024907780564691749527899177013978495925954891042213505032471154249587217342488105382143964872162352317153795918703738602811294988020790400406830570899346692888402195222524206807060033262678435941237800852691616184732199699983"},"rctxt":"95650189971639859896612697168398518174555679984051423930197404587933150680782307635981876795701282260886569030531509518577472744227104768139773550071582998135328541386103474244900743088590008426912178650425903427917608878536633077924458612023417837982597475938736958656995406235396866427894427477541584899831302054536164023375230562375959591948316605322328045641788957437240691382565803311876039782656157169530004694059508455786187015509258876824806694556808250916064559543523070870263318805331754691870543174609221526847542058954563771715740763642121304736631910606989341821044450289456724644698365195414508996978377","z":"30931274405908239007890874385170967603061487779677432303190865674750965567572978740022706424175437722173963850488296625234382628771402047435950207188587229830735692967511122478369596260635807055949842658003257782625140032345552811734684259724489194465204904940357385656425260021068243335380180404373610916660761856588524604896207550324650177162424459728110262870433527487174136617579313419321121537041812997489371858831584038908195572117490767641756996884580893003145723858706935861376796546277590651278836498576606347036898057816575425746855202249031593540829669694382215623764119884221830708338999694320658810512371"},"revocation":null}}"#,
            "2018-01-19 20:56:49"
        ],
        [
            "claim_definition_private::2hoqvcwupRTUNkXn6ArYzs:22",
            r#"{"secret_key":{"p":"147994992483722226695796045011684235809309423781128508158803929784354160216609372391549068696035183653818336853597866730292371284529976761888221582212813626580505679228888172522950665475350345678188763591772773741254257464285253418496398049565928060194413224976216924914132317463912094242224097692749187043829","q":"162148757912426329580848488425481308197570783683521257574076212536320583242105942819686169604321953715281620067963105294861614807334103995842227210817175897159871997469149148693805426651335858938548729488829824519277006024203128120131839471735406633445070652347566232438111357984964864315788582900774238972559"},"secret_key_revocation":null}"#,
            "2018-01-19 20:56:49"
        ],
        [
            "my_did::2hoqvcwupRTUNkXn6ArYzs",
            r#"{"did":"2hoqvcwupRTUNkXn6ArYzs","verkey":"vrWGArMA3toVoZrYGSAMjR2i9KjBS66bZWyWuYJJYPf"}"#,
            "2017-12-22 21:00:57"
        ],
        [
            "key::vrWGArMA3toVoZrYGSAMjR2i9KjBS66bZWyWuYJJYPf",
            r#"{"verkey":"vrWGArMA3toVoZrYGSAMjR2i9KjBS66bZWyWuYJJYPf","signkey":"xt19s1sp2UZCGhy9rNyb1FtxdKiDGZZPPWbEpqU41NEy3MmoeUuhq6T8F4JuRPgtj3hoT6BBjgnEF4bbhsR84NH"}"#,
            "2017-12-22 21:00:57"
        ],
        [
            "my_did::5bJqPo8aCWyBwLQosZkJcB",
            r#"{"did":"5bJqPo8aCWyBwLQosZkJcB","verkey":"3W9WGtRowAanh5q6giQrGncZVMvRwPedB9fJAJkAN5Gk"}"#,
            "2018-01-04 22:46:18"
        ],
        [
            "key::3W9WGtRowAanh5q6giQrGncZVMvRwPedB9fJAJkAN5Gk",
            r#"{"verkey":"3W9WGtRowAanh5q6giQrGncZVMvRwPedB9fJAJkAN5Gk","signkey":"xt19s1sp2UZCGhy9rNyb1FtxdKiDGZaRvDuYQ4AKCZCipe1dDms9sw66AKazbdzTSisr1CKjA1r1iDZcjw6pNUY"}"#,
            "2018-01-04 22:46:18"
        ]
    ];

    #[ignore]
    #[test]
    fn test_creating_claim_def_dependencies() {
        let wallet_name = "a_test_wallet";
        self::cxs::utils::logger::LoggerUtils::init();
        self::cxs::settings::set_defaults();

        pool::open_sandbox_pool();

        wallet::init_wallet(wallet_name).unwrap();
        let wallet_handle = wallet::get_wallet_handle();

        let (issuer_did, _) = SignusUtils::create_and_store_my_did(wallet_handle, Some(DEMO_ISSUER_PW_SEED)).unwrap();
        SignusUtils::create_and_store_my_did(wallet_handle, Some(DEMO_AGENT_PW_SEED)).unwrap();

        let data = r#"{"name":"Home Address","version":"0.1","attr_names":["address1","address2","city","state","zip"]}"#.to_string();
        let schema_handle = create_new_schema("1".to_string(), "name".to_string(), issuer_did.to_string(), data).unwrap();

        let schema_seq_no = get_sequence_num(schema_handle).unwrap();

        create_new_claimdef("anything".to_string(), "anything".to_string(), schema_seq_no, issuer_did, false).unwrap();
    }

    #[ignore]
    #[test]
    fn test_putting_claim_def_dependencies() {
        use std::path::Path;
        use self::rusqlcipher::Connection;
        use std::env::home_dir;

        self::cxs::utils::logger::LoggerUtils::init();
        self::cxs::settings::set_defaults();
        let wallet_key = String::from("");
        let home = home_dir().unwrap();
        let wallet_name = "my_real_wallet";
        let wallet_dir = format!(".indy_client/wallet/{}/sqlite.db", wallet_name);
        let wallet_dir = Path::new(&wallet_dir);
        let wallet_db = home.join(wallet_dir);

        if wallet_key.len() > 0 {
            self::cxs::settings::set_config_value(self::cxs::settings::CONFIG_WALLET_KEY, &wallet_key);
        }

        self::cxs::utils::wallet::init_wallet(wallet_name).unwrap();

        let connection = Connection::open(wallet_db.as_path()).unwrap();

        if wallet_key.len() > 0 {
            connection.execute(&format!("PRAGMA key='{}'", wallet_key), &[]).unwrap();
        }

        for entry in ENTRIES {
            connection.execute("INSERT OR REPLACE INTO wallet VALUES (?,?,?)", &[&entry[0].to_string(), &entry[1].to_string(), &entry[2].to_string()]).unwrap();
        }
    }
}